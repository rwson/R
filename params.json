{
  "name": "R",
  "tagline": "a lightweight javascript MVVM framework",
  "body": "### R\r\n\r\njavaScript轻量级MVVM框架\r\n\r\n---\r\n\r\n#### Useage(Demo)\r\n\r\nDemo是一个极简SPA应用\r\n\r\n    git clone https://github.com/rwson/R\r\n    \r\n    cd R && npm install\r\n    \r\n    npm start\r\n    \r\n    //  访问 localhost:3000\r\n\r\n----\r\n\r\n### API\r\n\r\n##### 声明Controller\r\n    \r\n\r\n    R.controller(\"indexCtrl\", function(scope) {\r\n        \r\n        scope.set({\r\n            \"key\": \"value\",\r\n            //  ...\r\n        });\r\n        \r\n        scope.defineEvents({\r\n            \"event1\": function() {\r\n                //  ...\r\n            },\r\n            \"event2\": function() {\r\n                //  ...\r\n            }\r\n        });\r\n        \r\n    });\r\n    \r\n通过\r\n\r\n    R.controller(name, fn);\r\n    \r\n声明一个Controller\r\n        \r\n在Controller中通过\r\n\r\n    scope.set({\r\n        \"key1\": \"value1\",\r\n        \"key2\": []\r\n    });\r\n    \r\n来设置绑定指令中所需的数据\r\n\r\n通过\r\n\r\n    scope.update({\r\n        \"key1\": \"value2\"\r\n    });\r\n        \r\n来修改相应数据\r\n        \r\n通过\r\n        \r\n    scope.defineEvents({\r\n        \"event1\": function() {\r\n            //  ...\r\n        },\r\n        \"event2\": function() {\r\n            //  ...\r\n        }\r\n    });\r\n        \r\n来设置绑定指令(绑定事件指令所需要的处理函数)\r\n\r\n---\r\n    \r\n##### 自定义Provider\r\n\r\n\r\n    R.provider(\"provider1\", function() {\r\n        return {\r\n            \"key\": \"value\",\r\n            //  ...\r\n        };\r\n    });\r\n    \r\n或\r\n    \r\n    R.provider(\"provider2\", {\r\n        \"key\": \"value\",\r\n        //  ...\r\n    });\r\n\r\n通过\r\n        \r\n    R.provider(name, any valid types);\r\n        \r\n声明一个Provider,需要注意的是,当函数第二个参数为function的时候,必须存在一个返回值,否则将是一个无效Provider\r\n\r\n---\r\n\r\n##### 自定义Service\r\n\r\n    R.service(\"shareData\", function() {\r\n        return {\r\n            \"key\": \"value\",\r\n            //  ...\r\n        };\r\n    });\r\n    \r\n或\r\n\r\n    R.service(\"shareData\", {\r\n        \"key\": \"value\",\r\n        //  ...\r\n    });\r\n\r\n通过\r\n    \r\n    R.service(name, any valid types);\r\n\r\n声明一个Service,需要注意的是,当函数第二个参数为function的时候,必须存在一个返回值,否则将是一个无效Service,通过数据共享可以实现相同数据在不同Controller种双向绑定的目的\r\n\r\n---\r\n\r\n##### Controller添加依赖注入(添加provider(相关[自定义]功能模块)/service(Controller数据共享))\r\n\r\n    R.conntroller(\"appCtrl\", function(scope, pageParams, shareData, customProvider){\r\n        \r\n        //  ...\r\n        \r\n    });\r\n\r\n    R.inject(\"appCtrl\", [\"pageParams\", \"shareData\", \"customProvider\"]);\r\n\r\n通过\r\n        \r\n    R.inject(controllerName, dependens);\r\n            \r\n将已经声明的Provider/Service添加到对应的Controller中\r\n\r\n其中dependens可以是字符串或者数组字符串类型\r\n\r\nscope无需注入,并且始终作为controller回调的第一个参数\r\n\r\n---\r\n\r\n##### 路由配置\r\n\r\n\r\n    R.config({\r\n        \"path\": {\r\n            \"/\": {\r\n                \"tplPath\": \"tpl/index.html\",\r\n                \"controller\": \"indexCtrl\"\r\n            },\r\n            \"/list/:id\": {\r\n                \"tplPath\": \"tpl/list.html\",\r\n                \"controller\": \"listCtrl\"\r\n            }\r\n        },\r\n        \"pushState\": true / false\r\n    });\r\n\r\n\r\n通过\r\n    \r\n    R.config({\r\n        \"path\": {\r\n            \r\n        },\r\n        \"pushState\": true\r\n    });\r\n\r\n指定当前应用的路由\r\n\r\n在path中,key可以是字符串或者REST风格(/list/:id)的路由配置\r\n\r\nvalue对应一个Object,有tplPath和controller,且都为字符串类型\r\n\r\ntplPath指定当前path对应的模板路径,当前检测到匹配当前路径后,会通过ajax的方式去请求该模板文件,并且放到DOM中,进行编译\r\n\r\ncontroller声明的controller的名字,当模板文件被请求成功并且放到DOM中后会执行对应的controller的回调\r\n\r\n---\r\n\r\n##### 自定义指令\r\n\r\n    R.directive(\"RCustom\" ,{\r\n        \"extend\": true,\r\n        \"type\": \"dom\",\r\n        \"constructor\": function(dirCfg) {\r\n            //  ...\r\n        },\r\n        \"link\": function(el, exp, scope) {\r\n            //  ...\r\n        },\r\n        \"update\": function(exp) {\r\n            //  ...\r\n        }\r\n    });\r\n\r\n\r\n通过\r\n    \r\n    R.directive(name, opt);\r\n\r\n可以实现自定义指令\r\n\r\n1.name:作为该指令出现的名称,驼峰命名法,最后绑定到HTML标签上的时候用\"-\"分割,并且全小写\r\n\r\n2.opt参数说明:\r\n\r\n\r\nname | 意义 | 类型 | 是否可选\r\n---|---|---|---\r\nextend | 是否继承父类,默认继承,继承父类可以调用父类的构造器,重写父类相关成员属性 | boolean | 是\r\ntype | 指令类型,现阶段没有意义 | string | 是\r\npriority | 指令优先级,指定指令执行顺序,现阶段没有意义 | number | 是\r\nlink | link方法,做第一次编译时被调用 | function | 必传\r\nupdate | update方法,做相关数据更新时被调用 | function | 是\r\n\r\n\r\n---\r\n\r\n#### 支持的指令(directive)\r\n\r\ndirective | 使用方式 | 描述\r\n---|---|---\r\nr-bind | r-bind=\"data\" | 绑定数据的data属性,并且在有数据的时候会做为当前标签的textContent显示\r\nr-model | r-model=\"name\" | 绑定数据中的name属性,在键盘输入的时候修改对应数据中的值,常用于表单元素\r\nr-href | r-href=\"link\" | 绑定数据中的link属性,常搭配a标签使用,指定a标签的href属性\r\nr-if | r-if=\"condition\" | 只有在condition为true的时候,输出当前元素及其子元素\r\nr-else | r-else=\"condition\" | 和r-if相反\r\nr-show | r-show=\"condition\" | 只有在condition为true的时候,显示当前元素\r\nr-hide | r-hide=\"condition\" | 和r-show相反\r\nr-for | r-else=\"item in list\" | 循环一个list(Array),渲染页面\r\nr-class | r-class=\"condition ? 'class-true' : 'class-false'\" | 根据condition的值往当前元素上添加css类,condition暂不支持计算表达式\r\nr-key-down | r-key-down=\"keyDownFn\" | 在当前元素触发keydown事件的时候,执行相关函数,常用于表单元素\r\nr-key-up | r-key-up=\"keyDownFn\" | 和r-key-down类似,事件类型变成keyup,常用于表单元素\r\n\r\n---\r\n\r\n#### 内置provider\r\n\r\n##### - pageParams\r\n\r\nmethod/attribure | 使用方式 | 描述\r\n---|---|---\r\npath | pageParams.path | 取得在配置路由时url中指定的参数名称和值(作为键值对形式展现)\r\nqueryString | pageParams.queryString | 取得url查询字符串相关参数(作为键值对形式展现)\r\n\r\n\r\n##### - cookie\r\n\r\nmethod/attribure | 使用方式 | 描述\r\n---|---|---\r\nset | cookie.set(\"name\", \"value\", 30) | 设置浏览器cookie内容,第一个参数是cookie名称,第二个是对应的值,第三个是过期时间\r\nget | cookie.get(\"name\") | 获取浏览器的cookie,传入cookie名\r\ndelete | cookie.delete(\"name\") | 删除浏览器的cookie,传入cookie名\r\n\r\n##### - http\r\n\r\n此处集成的是jQuery/Zepto中的ajax模块,具体用法见jQuery中[ajax](http://hemin.cn/jq/jQuery.ajax.html)部分的API\r\n\r\n\r\n    http.ajax({\r\n        //  ...\r\n    });\r\n    \r\n    http.get({\r\n        //  ...\r\n    });\r\n    \r\n    //  ...\r\n    \r\n    //  此处的http是controller回调函数的形参,对应注入http模块,也可改成其他的\r\n\r\n----\r\n\r\n#### TODO\r\n\r\n- ~~提供R.factory/R.service方法,使得Controller之间实现数据共享([AngularJs](https://angular.io/)中的service和factory有返回值类型区别,R中没有给返回值做类型限制,所以实现一个service,达到数据共享的目的)~~\r\n- ~~目前路由配置中pushState对应的值为false的时候还是采用HTML5的处理方式,此处需要改成hash的处理方式~~\r\n- ~~提供R.directive方法,支持自定义指令~~\r\n- 提供更多内置指令以及指令优先级(约定执行顺序)\r\n- 目前仅支持require形式的引入,提供支持CMD/script标签引入的方式\r\n- 优化在通过Service方式共享数据时更新过慢的问题\r\n- 指令表达式内的复杂计算问题(现在仅支持指令内的基本表达式(逻辑判断条件,其他类型转布尔操作,加减乘除模[a.b.c + a.b.d * 5 + a.b.e.f / a.c ]),对于要遵守相关优先级[(a.b.c + a.cb) / a.e.f]这种的暂未做支持)\r\n\r\n----\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}